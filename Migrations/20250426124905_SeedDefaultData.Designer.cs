// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTickets.Data;

#nullable disable

namespace eTickets.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250426124905_SeedDefaultData")]
    partial class SeedDefaultData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eTickets.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "This is the bio of the first actor",
                            FullName = "Actor 1",
                            ProfilePictureURL = "http://dotnethow.net/images/actors/actor-1.jpeg"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "This is the bio of the second actor",
                            FullName = "Actor 2",
                            ProfilePictureURL = "http://dotnethow.net/images/actors/actor-2.jpeg"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "This is the bio of the third actor",
                            FullName = "Actor 3",
                            ProfilePictureURL = "http://dotnethow.net/images/actors/actor-3.jpeg"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "This is the bio of the fourth actor",
                            FullName = "Actor 4",
                            ProfilePictureURL = "http://dotnethow.net/images/actors/actor-4.jpeg"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "This is the bio of the fifth actor",
                            FullName = "Actor 5",
                            ProfilePictureURL = "http://dotnethow.net/images/actors/actor-5.jpeg"
                        });
                });

            modelBuilder.Entity("eTickets.Models.ActorMovie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("ActorMovies");

                    b.HasData(
                        new
                        {
                            MovieId = 1,
                            ActorId = 1
                        },
                        new
                        {
                            MovieId = 1,
                            ActorId = 2
                        },
                        new
                        {
                            MovieId = 2,
                            ActorId = 3
                        },
                        new
                        {
                            MovieId = 3,
                            ActorId = 4
                        },
                        new
                        {
                            MovieId = 4,
                            ActorId = 5
                        },
                        new
                        {
                            MovieId = 5,
                            ActorId = 1
                        },
                        new
                        {
                            MovieId = 6,
                            ActorId = 2
                        },
                        new
                        {
                            MovieId = 6,
                            ActorId = 3
                        },
                        new
                        {
                            MovieId = 7,
                            ActorId = 3
                        },
                        new
                        {
                            MovieId = 7,
                            ActorId = 4
                        },
                        new
                        {
                            MovieId = 7,
                            ActorId = 5
                        });
                });

            modelBuilder.Entity("eTickets.Models.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cinemas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "This is the description of the first cinema",
                            Logo = "http://dotnethow.net/images/cinemas/cinema-1.jpeg",
                            Name = "Cinema 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "This is the description of the second cinema",
                            Logo = "http://dotnethow.net/images/cinemas/cinema-2.jpeg",
                            Name = "Cinema 2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "This is the description of the third cinema",
                            Logo = "http://dotnethow.net/images/cinemas/cinema-3.jpeg",
                            Name = "Cinema 3"
                        },
                        new
                        {
                            Id = 4,
                            Description = "This is the description of the fourth cinema",
                            Logo = "http://dotnethow.net/images/cinemas/cinema-4.jpeg",
                            Name = "Cinema 4"
                        },
                        new
                        {
                            Id = 5,
                            Description = "This is the description of the fifth cinema",
                            Logo = "http://dotnethow.net/images/cinemas/cinema-5.jpeg",
                            Name = "Cinema 5"
                        });
                });

            modelBuilder.Entity("eTickets.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProducerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = 0,
                            CinemaId = 1,
                            Description = "This is the Shawshank Redemption description",
                            EndDate = new DateTime(2025, 5, 6, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7505),
                            ImageURL = "http://dotnethow.net/images/movies/movie-1.jpeg",
                            Name = "The Shawshank Redemption",
                            Price = 39.990000000000002,
                            ProducerId = 1,
                            StartDate = new DateTime(2025, 4, 16, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7500)
                        },
                        new
                        {
                            Id = 2,
                            Category = 1,
                            CinemaId = 2,
                            Description = "This is the No Country For Old Men description",
                            EndDate = new DateTime(2025, 5, 11, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7516),
                            ImageURL = "http://dotnethow.net/images/movies/movie-2.jpeg",
                            Name = "No Country for Old Men",
                            Price = 29.989999999999998,
                            ProducerId = 2,
                            StartDate = new DateTime(2025, 4, 21, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7514)
                        },
                        new
                        {
                            Id = 3,
                            Category = 2,
                            CinemaId = 3,
                            Description = "This is the Life description",
                            EndDate = new DateTime(2025, 5, 16, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7524),
                            ImageURL = "http://dotnethow.net/images/movies/movie-3.jpeg",
                            Name = "Life",
                            Price = 19.989999999999998,
                            ProducerId = 3,
                            StartDate = new DateTime(2025, 4, 19, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7522)
                        },
                        new
                        {
                            Id = 4,
                            Category = 5,
                            CinemaId = 4,
                            Description = "This is the Ghost movie description",
                            EndDate = new DateTime(2025, 5, 3, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7532),
                            ImageURL = "http://dotnethow.net/images/movies/movie-4.jpeg",
                            Name = "Ghost",
                            Price = 39.5,
                            ProducerId = 4,
                            StartDate = new DateTime(2025, 4, 26, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7530)
                        },
                        new
                        {
                            Id = 5,
                            Category = 3,
                            CinemaId = 1,
                            Description = "This is the Race movie description",
                            EndDate = new DateTime(2025, 4, 21, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7539),
                            ImageURL = "http://dotnethow.net/images/movies/movie-6.jpeg",
                            Name = "Race",
                            Price = 39.5,
                            ProducerId = 2,
                            StartDate = new DateTime(2025, 4, 16, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7537)
                        },
                        new
                        {
                            Id = 6,
                            Category = 7,
                            CinemaId = 1,
                            Description = "This is the Scoob movie description",
                            EndDate = new DateTime(2025, 4, 24, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7547),
                            ImageURL = "http://dotnethow.net/images/movies/movie-7.jpeg",
                            Name = "Scoob",
                            Price = 39.5,
                            ProducerId = 3,
                            StartDate = new DateTime(2025, 4, 16, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7545)
                        },
                        new
                        {
                            Id = 7,
                            Category = 2,
                            CinemaId = 1,
                            Description = "This is the Cold Soles movie description",
                            EndDate = new DateTime(2025, 5, 16, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7555),
                            ImageURL = "http://dotnethow.net/images/movies/movie-8.jpeg",
                            Name = "Cold Soles",
                            Price = 39.5,
                            ProducerId = 5,
                            StartDate = new DateTime(2025, 4, 29, 15, 49, 4, 305, DateTimeKind.Local).AddTicks(7553)
                        });
                });

            modelBuilder.Entity("eTickets.Models.Producer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "This is the bio of the first producer",
                            FullName = "Producer 1",
                            ProfilePictureURL = "http://dotnethow.net/images/producers/producer-1.jpeg"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "This is the bio of the second producer",
                            FullName = "Producer 2",
                            ProfilePictureURL = "http://dotnethow.net/images/producers/producer-2.jpeg"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "This is the bio of the third producer",
                            FullName = "Producer 3",
                            ProfilePictureURL = "http://dotnethow.net/images/producers/producer-3.jpeg"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "This is the bio of the fourth producer",
                            FullName = "Producer 4",
                            ProfilePictureURL = "http://dotnethow.net/images/producers/producer-4.jpeg"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "This is the bio of the fifth producer",
                            FullName = "Producer 5",
                            ProfilePictureURL = "http://dotnethow.net/images/producers/producer-5.jpeg"
                        });
                });

            modelBuilder.Entity("eTickets.Models.ActorMovie", b =>
                {
                    b.HasOne("eTickets.Models.Actor", "Actor")
                        .WithMany("ActorMovies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTickets.Models.Movie", "Movie")
                        .WithMany("ActorMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("eTickets.Models.Movie", b =>
                {
                    b.HasOne("eTickets.Models.Cinema", "Cinema")
                        .WithMany("Movies")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTickets.Models.Producer", "Producer")
                        .WithMany("Movies")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("eTickets.Models.Actor", b =>
                {
                    b.Navigation("ActorMovies");
                });

            modelBuilder.Entity("eTickets.Models.Cinema", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("eTickets.Models.Movie", b =>
                {
                    b.Navigation("ActorMovies");
                });

            modelBuilder.Entity("eTickets.Models.Producer", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
